

// Default use:
//  @include min-(width,4,240);

//  use width calculation
//  @include min-(width,4,240,'calc(100% - 240px)');


@mixin min-($what,$columns,$min-width,$alt: false){
  $mq: grid-mq-min($columns,$min-width);
  @media #{$mq}{
    @if $alt != false{
      #{$what}: $alt;
    } @else {
      #{$what}: #{$min-width}px;
    }
    @content;
  }
}



// Just making it simpler to understand

@mixin min-width($columns,$min-width,$alt: false){
  @include min-('width',$columns,$min-width,$alt){
    @content;
  }
}

@mixin min-height($columns,$min-width,$alt: false){
  @include min-('height',$columns,$min-width,$alt){
      @content;
  }
}
@mixin min-left($columns,$min-width,$alt: false){
  @include min-('left',$columns,$min-width,$alt){
      @content;
  }
}

@mixin min-right($columns,$min-width,$alt: false){
  @include min-('right',$columns,$min-width,$alt){
    @content;
  }
}
@mixin min-fontsize($columns,$min-width,$alt: false){
  @include min-('font-size',$columns,$min-width,$alt){
    @content;
  }
}
@mixin min-line-height($columns,$min-width,$alt: false){
  @include min-('line-height',$columns,$min-width,$alt){
    @content;
  }
}



/* Default use:
  @include min-(width,4,240);

  use width calculation
  @include min-(width,4,240,'calc(100% - 240px)');
*/

@mixin max-($what,$columns,$width,$alt: false){
  $mq: grid-mq-max($columns,$width);
  @media #{$mq}{
    @if $alt != false{
      #{$what}: $alt;
    } @else {
      #{$what}: #{$width}px;
    }
    @content;
  }
}



// Just making is simpler to understand

@mixin max-width($columns,$min-width,$alt: false){
  @include max-('width',$columns,$min-width,$alt){
    @content;
  }
}
@mixin max-height($columns,$min-width,$alt: false){
  @include max-('height',$columns,$min-width,$alt){
    @content;
  }
}

@mixin max-left($columns,$min-width,$alt: false){
  @include max-('left',$columns,$min-width,$alt){
    @content;
  }
}

@mixin max-right($columns,$min-width,$alt: false){
  @include max-('right',$columns,$min-width,$alt){
    @content;
  }
}

@mixin max-fontsize($columns,$min-width,$alt: false){
  @include max-('font-size',$columns,$min-width,$alt){
    @content;
  }
}
@mixin max-line-height($columns,$min-width,$alt: false){
  @include max-('line-height',$columns,$min-width,$alt){
    @content;
  }
}

/* Generate the classes */


@mixin createGridClasses($child: false){
	$childClass: "";
	@if $child == true{
		$childClass: "> .#{$prefix}column";
	}
	@for $a from 0 through $grid-columns{
		$percentage: percentage($a/$grid-columns); //
		$column: #{$a}#{$childClass};
		&.#{$prefix}column-#{$column}{
			width: #{$percentage};
			@if $grid-cssgrid{
				@supports (display: grid){
					width: #{$a}fr;
				}
			}
		}
		&.#{$prefix}offset-#{$column}{
			margin-left: #{$percentage};
		}
		&.#{$prefix}push-#{$column}{
			margin-right: #{$percentage};
		}
		&.#{$prefix}pull-#{$column}{
			margin-left: -#{$percentage};
		}
	}


	$min-width: 0;
	@each $bp-name,$bp-value in $grid-breakpoints{
		$mq-only: "#{$grid-screen} and (min-width: #{$min-width}px) and (max-width: #{$bp-value}px)"; $mq: "#{$grid-screen} and (min-width: #{$min-width}px)"; $min-width: $bp-value + 1;
		@each $part,$percentage in $grid-parts{
  			&%#{$part}#{$childClass},
  			&.#{$prefix}#{$part}#{$childClass}{
				width: percentage($percentage);
				@if $grid-cssgrid == true{
					@supports (display: grid){
						$parts: $percentage * $grid-columns; width: #{$parts}fr;
					}
				}
			}
		}
		@media #{$mq-only}{
			&.#{$prefix}#{$bp-name}-only-0#{$childClass}{
				width: 0; display: none;
			}
			@each $part,$percentage in $grid-parts{

				%.#{$bp-name}-only-#{$part}#{$childClass},
				&.#{$prefix}#{$bp-name}-only-#{$part}#{$childClass}{
					width: percentage($percentage);
				}
			}
			@for $a from 1 through $grid-columns{
				$percentage: percentage($a/$grid-columns);
				&.#{$prefix}#{$bp-name}-only-#{$a}#{$childClass}{
					width: $percentage;
				}
				&.#{$prefix}offset-#{$bp-name}-only-#{$a}#{$childClass}{
					margin-left: $percentage;
				}
				&.#{$prefix}push-#{$bp-name}-only-#{$a}#{$childClass}{
					margin-right: $percentage;
				}
				&.#{$prefix}pull-#{$bp-name}-only-#{$a}#{$childClass}{
					margin-left: -#{$percentage};
				}
			}
		}
		@media #{$mq}{
			%.#{$bp-name}-0#{$childClass}
  		&.#{$prefix}#{$bp-name}-0#{$childClass}{
				width: 0; display: none;
			}
			@each $part,$percentage in $grid-parts{
        %#{$bp-name}-#{$part}#{$childClass},
				&.#{$prefix}#{$bp-name}-#{$part}#{$childClass}{
					width: percentage($percentage);

					@if $grid-cssgrid == true{
						@supports (display: grid){
							$parts: $percentage * $grid-columns; width: #{$parts}fr;
						}
					}
				}
			}
			@for $a from 1 through $grid-columns{
				$percentage: percentage($a/$grid-columns);

				&.#{$prefix}#{$bp-name}-#{$a}#{$childClass}{
					width: $percentage;
					@if $grid-cssgrid == true{
						@supports (display: grid){
							$parts: ($a/$grid-columns) * $grid-columns; //
							width: auto; grid-column: #{$parts} span; 
						}
					}
				}
				&.#{$prefix}offset-#{$bp-name}-#{$a}#{$childClass}{
					margin-left: $percentage;
				}
				&.#{$prefix}push-#{$bp-name}-#{$a}#{$childClass}{
					margin-right: $percentage;
				}
				&.#{$prefix}pull-#{$bp-name}-#{$a}#{$childClass}{
					margin-left: -#{$percentage};
				}
			}
		}
	}
}
